<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="false">

    <description>数据源管理、事务配置</description>
    
	<!-- 数据源druid的配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、username、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- spring整合mybatis （mybatis-spring项目提供整合类） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- spring中数据源引用 -->
		<property name="dataSource" ref="dataSource" />
		<!-- Mybatis自身的配置文件，一般用来声明别名 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- mybatis的映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/*/*.xml" />
	</bean>

	<!-- 配置 SqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 声明式事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 注解方式使用事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
	
	<!-- 拦截方式事务管理 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"
				isolation="READ_COMMITTED" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true"
				isolation="READ_COMMITTED" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" read-only="true" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置事务切面配置 -->
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice"
			pointcut="execution(* com.*.*.service..*.*(..))" />
	</aop:config>
	
</beans>